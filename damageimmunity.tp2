BACKUP ~damageimmunity\backup~ // location to store files for uninstall purposes
AUTHOR ~daytonkelly@gmail.com~

BEGIN ~damageimmunity~

//kjernon's code 

DEFINE_ACTION_FUNCTION	ADD_SPLPROT	INT_VAR	stat = 0	value = 0	relation = 0	RET	new_row		BEGIN
	ACTION_IF	(stat > 278)	BEGIN	WARN	~SPLPROT.2DA - Stat out of Bounds.~	END
	ACTION_IF	((stat != 259) AND (stat != 260) AND (relation > 11))	BEGIN	WARN	~SPLPROT.2DA - Relation out of Bounds.~	END
	COPY_EXISTING ~SPLPROT.2DA~	~override~
		COUNT_2DA_COLS	cols
		COUNT_2DA_ROWS cols rows
		TEXT_SPRINT check_row ~~
		TEXT_SPRINT check_stat ~~
		SET new_row = 0
		FOR(current_row = 0; current_row < rows; ++current_row)	BEGIN	READ_2DA_ENTRY current_row 1 cols check_stat
			PATCH_IF (~%check_stat%~ STRING_EQUAL ~%stat%~)	BEGIN	READ_2DA_ENTRY current_row 2 cols check_value
				PATCH_IF (~%check_value%~ STRING_EQUAL ~%value%~)	BEGIN	READ_2DA_ENTRY current_row 3 cols check_relation
					PATCH_IF (~%check_relation%~ STRING_EQUAL ~%relation%~)	BEGIN	new_row = current_row	current_row = rows	END
				END
			END
		END
		PATCH_IF (new_row = 0)	BEGIN
			FOR(current_row = 0; current_row < rows; ++current_row)	BEGIN	READ_2DA_ENTRY current_row 1 cols check_stat
				PATCH_IF (~%check_stat%~ STRING_EQUAL ~*~)	BEGIN	new_row = current_row	current_row = rows	END
			END
			PATCH_IF (new_row = 0)	BEGIN	new_row = rows	INSERT_2DA_ROW rows cols ~%new_row%		   %stat%		   %value%		   %relation%~
			END	ELSE	BEGIN	SET_2DA_ENTRY new_row 1 cols ~%stat%~	SET_2DA_ENTRY new_row 2 cols ~%value%~	SET_2DA_ENTRY new_row 3 cols ~%relation%~	END
		END
	BUT_ONLY
END
//	Array of Restistance / Stat#
ACTION_DEFINE_ASSOCIATIVE_ARRAY	DMG_ARRAY	BEGIN
	~CRUSH~		=>	22
	~ACID~		=>	17
	~COLD~		=>	15
	~ELEC~		=>	16
	~FIRE~		=>	14
	~PIERC~		=>	23
	~POISN~		=>	74
	~MAGIC~		=>	73
	~MSSL~		=>	24
	~SLASH~		=>	21
	~MFIRE~		=>	19
	~MCOLD~		=>	20
END
ACTION_PHP_EACH	DMG_ARRAY AS one => two	BEGIN
	LAF	ADD_SPLPROT	INT_VAR	stat = two	value = 100	relation = 	2	RET	min = new_row	END
	LAF	ADD_SPLPROT	INT_VAR	stat = two	value = 128	relation = 	4	RET	max = new_row	END
	LAF	ADD_SPLPROT	INT_VAR	stat = 260	value = min	relation = 	max	RET	EVAL ~%one%~ = new_row	END
END

/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////

//  Relay's Addition

//	Array of damage value / type
ACTION_DEFINE_ASSOCIATIVE_ARRAY	TYP_ARRAY BEGIN
	0	   =>	~CRUSH~
	1      =>	~ACID~                      	
	2      =>	~COLD~                      	
	4      =>	~ELEC~                      	
	8      =>	~FIRE~                      	
	16	   =>	~PIERC~                      	
	32	   =>	~POISN~                      	
	64	   =>	~MAGIC~                      	
	128	   =>	~MSSL~                      	
	256	   =>	~SLASH~                      	
	512	   =>	~MFIRE~                      	
	1024   =>	~MCOLD~
	2048   =>   2048
END
 
COPY_EXISTING_REGEXP GLOB ~^.+\.itm$~ ~override~

	PATCH_IF (SOURCE_SIZE > 0x71) BEGIN
	SET found_type=0
    READ_LONG 0x64 ab_off
    READ_SHORT 0x68 num_ab
    READ_LONG 0x6a ef_off
	
		FOR (ab=0;ab<num_ab;ab+=1) BEGIN
		READ_SHORT (ab_off+ab*0x38+0x1e) num_eff
        READ_SHORT (ab_off+ab*0x38+0x20) ef_ind
		
			FOR (eff=0;eff<num_eff;eff+=1) BEGIN
			READ_SHORT (ef_off+(eff+ef_ind)*0x30) opcode                      // Searching for any "damage" opcodes
			
				PATCH_IF opcode=12 BEGIN
				SET found_type=1
				
					READ_BYTE (ef_off+((eff+ef_ind)*0x30)+0x0a) element					  
                    READ_LONG (ef_off+((eff+ef_ind)*0x30)+0x08) dtype           // Saving the damage type
						SET ptype = $TYP_ARRAY(EVAL ~%element%~)                // Associates a damage type from the item to a protection type from Kjernon's splprot array
                        PATCH_IF ptype <= 1024 BEGIN
					END	
				END
			END
		END
	
PATCH_IF found_type=1 BEGIN
LPF CLONE_EFFECT
INT_VAR
match_opcode = 12
match_parameter2 = dtype
opcode = 324
power = 0
target = 2 
duration = 1 
parameter2 = ptype
timing = 0
dicenumber = 0
dicesize = 0 
savingthrow = 0
savebonus = 0
special = 1
STR_VAR
insert = first
resource = EVAL ~%SOURCE_RES%~
END
PATCH_PRINT ~source is %SOURCE_RES% damage number is %element% and protection number is %ptype%~	 // Debug
	
	END
END


COPY_EXISTING_REGEXP GLOB ~^.+\.spl$~ ~override~

	PATCH_IF (SOURCE_SIZE > 0x71) BEGIN
	SET found_type=0
    READ_LONG 0x64 ab_off
    READ_SHORT 0x68 num_ab
    READ_LONG 0x6a ef_off
	
		FOR (ab=0;ab<num_ab;ab+=1) BEGIN
		READ_SHORT (ab_off+ab*0x28+0x1e) num_eff
        READ_SHORT (ab_off+ab*0x28+0x20) ef_ind
		
			FOR (eff=0;eff<num_eff;eff+=1) BEGIN
			READ_SHORT (ef_off+(eff+ef_ind)*0x30) opcode                        // Searching for any "damage" opcodes
			
				PATCH_IF opcode=12 BEGIN
				SET found_type=1
				
					READ_BYTE (ef_off+((eff+ef_ind)*0x30)+0x0a) element					  
                    READ_LONG (ef_off+((eff+ef_ind)*0x30)+0x08) dtype           // Saving the damage type
						SET ptype = $TYP_ARRAY(EVAL ~%element%~)                // Associates a damage type from the item to a protection type from Kjernon's splprot array
                        PATCH_IF ptype <= 1024 BEGIN
					END	
				END
			END
		END
	
PATCH_IF found_type=1 BEGIN
LPF CLONE_EFFECT
INT_VAR
match_opcode = 12
match_parameter2 = dtype
opcode = 324
power = 0
target = 2 
duration = 1 
parameter2 = ptype
timing = 0
dicenumber = 0
dicesize = 0 
savingthrow = 0
savebonus = 0
special = 1
STR_VAR
insert = first
resource = EVAL ~%SOURCE_RES%~
END
PATCH_PRINT ~source is %SOURCE_RES% damage number is %element% and protection number is %ptype%~	 // Debug
	
	END
END
		
	
	
	
	
	
			
